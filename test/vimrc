set nocompatible              " be iMproved, required
filetype off                  " required
"   设置默认解码
set fenc=utf-8
set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936

"去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible

" 显示中文帮助
if version >= 603
    set helplang=cn
    set encoding=utf-8
endif

" 语法高亮
syntax enable

syntax on

set background=dark
"set background=light

"下面两行在进行编写代码时，在格式对起上很有用；
"第一行，vim使用自动对起，也就是把当前行的对起格式应用到下一行；
"第二行，依据上面的对起格式，智能的选择对起方式，对于类似C语言编
"写上很有用
set autoindent
set smartindent

"查询时非常方便，如要查找book单词，当输入到/b时，会自动找到第一
"个b开头的单词，当输入到/bo时，会自动找到第一个bo开头的单词，依
"次类推，进行查找时，使用此设置会快速找到答案，当你找要匹配的单词
"时，别忘记回车
set incsearch

set hlsearch

" 高亮当前行
set cursorline

" 高亮当前列
set cursorcolumn

" 启用循环查找方式
set wrapscan

" 显示括号匹配
set showmatch 

" 我的状态行显示的内容（包括文件类型和解码）
set statusline=%F%m%r%h%w\[POS=%l,%v][%p%%]\%{strftime(\"%d/%m/%y\ -\ %H:%M\")}

" 总是显示状态行
set laststatus=2

" 制表符为4
set tabstop=4

"设置自动换行
set wrap

"设置光标移动到屏幕之外时，自动向右滚动10个字符
set sidescroll=10

" 统一缩进为4
set softtabstop=4

" 设置自动缩进长度为4空格
set shiftwidth=4

" 在c,c++,python文件中用空格代替制表符
autocmd FileType c,cpp,python set shiftwidth=4 | set expandtab

" 载入文件类型插件
filetype plugin on

" 设置字体
set guifont=Monaco:h12


" 设置配色
""colorscheme solarized  "可能需要提前下载
""colorscheme wombat256  "可能需要提前下载
""colorscheme darkblue  "可能需要提前下载
colorscheme molokai  "可能需要提前下载

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" 用来提供一个导航目录的侧边栏 "
Plugin 'scrooloose/nerdtree'
" 可以使 nerdtree 的 tab 更加友好些
"Plug 'jistr/vim-nerdtree-tabs'
Plugin 'SirVer/ultisnips'
Plugin 'fatih/vim-go'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'davidhalter/jedi'
"Plugin 'jiangmiao/auto-pairs'

" 查看当前代码文件中的变量和函数列表的插件，
" 可以切换和跳转到代码中对应的变量和函数的位置
" 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持
"Plug 'majutsushi/tagbar'

" Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态
"Plug 'jiangmiao/auto-pairs'




" All of your Plugins must be added before the following line
call vundle#end()            " required

" 启用自动补全
filetype plugin indent on    " required
set nu

"显示标尺，就是在右下角显示光标位置
set ruler

"浅色显示当前行
""autocmd InsertLeave * se nocul

" 退出插入模式指定类型的文件自动保存
au InsertLeave *.go,*.sh,*.php,*.py write

"用浅色高亮当前行
autocmd InsertEnter * se cul

"显示输入的命令
set showcmd

"==============================================================
" YouCompleteMe  自动补全配置
set completeopt=longest,menu "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>" "回车即选中当前项
"上下左右键的行为 会显示其他信息
inoremap <expr> <Down> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up> pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

"youcompleteme 默认tab s-tab 和自动补全冲突
"let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示

let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2 " 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0 " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1 " 语法关键字补全
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR> "force recomile with syntastic
"nnoremap <leader>lo :lopen<CR> "open locationlist
"nnoremap <leader>lc :lclose<CR> "close locationlist
inoremap <leader><leader> <C-x><C-o>
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0

nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> " 跳转到定义处
"==============================================================
